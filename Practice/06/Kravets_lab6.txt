;1. Визначити функції MIN, MAX, INCR, DECR для списків. Функція INCR (DECR) повертає істину, якщо значення аргументів знаходяться в зростаючому (спадному) порядку.

; Task 1: MIN
(defun minimum (lst)
  (cond ((null (cdr lst)) (car lst))
    ((< (car lst) (minimum (cdr lst))) (car lst))
    ((minimum (cdr lst)))
  )
)
(princ "Task 1 MIN: ")
(print (minimum '(9 2 5 6 1)))
(terpri)

; Task 1: MAX
(defun maximum (lst)
  (cond ((null (cdr lst)) (car lst))
    ((> (car lst) (maximum (cdr lst))) (car lst))
    ((maximum (cdr lst)))
  )
)
(princ "Task 1 MAX: ")
(print (maximum '(9 2 5 6 1)))
(terpri)

; Task 1: INCR
(defun incr (lst)
  (cond ((null (cdr lst)) T)
    ((and (< (car lst) (car (cdr lst))) (incr (cdr lst))))
  )
)

(princ "Task 1 INCR: ")
(print (incr '(1 9 5)))
(terpri)

; Task 1: DECR
(defun decr (lst)
  (cond ((null (cdr lst)) T)
    ((and (> (car lst) (car (cdr lst))) (decr (cdr lst))))
  )
)

(princ "Task 1 DECR: ")
(print (decr '(10 9 5)))
(terpri)

(princ "-------------------------------------------- ")
(terpri)

;2. Написати функцію, яка за списком з підсписками знаходить: a) суму елементів                     в) кількість підсписків б) кількість елементів                г) лінеризує список

; Task 2: a)суму елементів
(defun el-sum (lst)
    (cond ((null lst) 0)
          ((atom lst) 0)
          ((+ (car lst) (el-sum (cdr lst))))
    )
)

(princ "Task 2 Сума елементів: ")
(print (el-sum '(10 9 5)))
(terpri)

; Task 2: б) кількість елементів 
(defun count-len (lst)
(cond ((null lst) 0)
        ((atom lst) 0)
        ((+ 1 (count-len (cdr lst))))
  )
)

(princ "Task 2  Кількість елементів: ")
(print (count-len '(1 3 5 6 (7 8))))
(terpri)

; Task 2: в) кількість підсписків 
(defun count-sublists (lst)
    (cond ((null lst) 0)
        ((atom lst) 0)
        ((atom (car lst)) (count-sublists (cdr lst)))
        ((+ 1
      (count-sublists (car lst))
      (count-sublists (cdr lst)))
    )
  )
)

(princ "Task 2  Кількість підсписків: ")
(PRINT (count-sublists '(1 (2) (4 (4 5))) ))
(terpri)
(PRINT (count-sublists '(1 (2) (4 (6 (5 6 7))) (3)) ))
(terpri)

; Task 2: г) лінеризує список
(defun linealization (lst)
    (cond
        ((null lst) NIL)
        ((listp (car lst)) (append (linealization (car lst)) (linealization (cdr lst))))
        ((atom (car lst)) (cons (car lst) (linealization (cdr lst))))
    )
)

(princ "Task 2 Лінеризує список: ")
(print(linealization '(2 4 9 (7 3 9) (2 1) 84)))
(terpri)

(princ "-------------------------------------------- ")
(terpri)

;3. Написати функцію:
;a) (DIVIS x y) — повертає частку та остачу від ділення x на y. Повернути результат  у вигляді конса. Не використовувати функцій ділення та остачі.
;б) (POW x y) — x в степені y. Запропонувати алгоритми з часовою оцінкою O(y) та O(log y).
;в) (SLIST n) — розклад числа n на прості множники. Як результат виконання функції повернути список простих чисел, добуток яких дорівнює n.
;г) (PERLEN n) — за натуральним числом n повернути довжину періоду дробу 1/n.
;д) (SUMFACT n) – сума 1/0! + 1/1! + ... + 1/n!.

; Task 3: a) (DIVIS x y) — повертає частку та остачу від ділення x на y. Повернути результат  у вигляді конса. Не використовувати функцій ділення та остачі.
(defun divis (x y)
  (cond ((EQL y 0) (return-from divis "Can't divide by zero"))
        ((< x y) (cons 0 x))
  )
  (setq k 0)
  (loop while (>= x y)
    do
    (setq k (+ k 1))
    (setq x (- x y)))
  (cons k x)
) 

(princ "Task 3 Частка та остача від ділення x на y: ")
(print (divis 5 0))
(terpri)
(print (divis 5 3))
(terpri)
(print (divis 4 2))
(terpri)

; Task 3: б)(POW x y) — x в степені y. Запропонувати алгоритми з часовою оцінкою O(y) та O(log y).
(defun power1 (x y)
            (cond ((EQL y 0) 1)
                ((* x (power1 x (- y 1))))
            )
)

(princ "Task 3 x в степені y O(y): ")
(print (power1 5 3))
(terpri)

(defun power2 (x y)
  (cond ((EQL y 0) 1)
        ((evenp y)
         (setq c (power2 x (/ y 2)))
           (* c c))
        ((oddp y)
         (setq c (power2 x (/ (- y 1) 2)))
           (* x c c)
        )
    )
)

(princ "Task 3 x в степені y O(log y): ")
(print (power2 5 3))
(terpri)

; Task 3: в) (SLIST n) — розклад числа n на прості множники. Як результат виконання функції повернути список простих чисел, добуток яких дорівнює n.
(defun is-prime (n)
  (cond
    ((<= n 1) nil)
    ((= n 2) t)
    ((= (mod n 2) 0) nil)
    (t
      (loop for i from 3 to (isqrt n) by 2
            until (= (mod n i) 0)
            finally (return t))
    )
  )
)

(defun SLIST-rec (n divisor)
  (cond
    ((= n 1) nil)
    ((= (mod n divisor) 0)
      (if (is-prime divisor)
          (cons divisor (SLIST-rec (/ n divisor) divisor))
          (SLIST-rec n (+ divisor 1))
      )
    )
    (t (SLIST-rec n (+ divisor 1)))
  )
)

(defun SLIST (n)
  (SLIST-rec n 2)
)

(princ "Task 3 Розклад числа n на прості множники:")
(PRINT(SLIST 36))
(terpri)

; Task 3: г) (PERLEN n) — за натуральним числом n повернути довжину періоду дробу 1/n.
(defun PERLEN-rec (n remainder-list)
  (let* ((next-remainder (mod (* 10 (car remainder-list)) n))
         (next-index (+ 1 (length remainder-list))))
    (if (zerop next-remainder) 
        0 
        (if (member next-remainder (cdr remainder-list))
            next-index 
            (PERLEN-rec n (append remainder-list (list next-remainder))))
    )
  )
)

(defun PERLEN (n)
  (if (= n 1)
      0 
      (PERLEN-rec n (list 1))
  )
)

(princ "Task 3 Повернути довжину періоду дробу 1/n: ")
(PRINT (PERLEN 7)) 
(terpri)

; Task 3: д) (SUMFACT n) – сума 1/0! + 1/1! + ... + 1/n!.
(defun factorial (n)
  (if (= n 0)
      1
      (* n (factorial (- n 1)))
  )
)

(defun SUMFACT-rec (n)
  (if (= n 0)
      1.0
      (+ (/ 1.0 (factorial n)) (SUMFACT-rec (- n 1)))
  )
)

(defun SUMFACT (n)
  (SUMFACT-rec n)
)

(princ "Task 3 Сума 1/0! + 1/1! + ... + 1/n!: ")
(PRINT (SUMFACT 5)) 
(terpri)

(princ "-------------------------------------------- ")
(terpri)

; Task 7. Надрукувати квадрати всіх натуральних чисел від 0 до n. Розв’язати також цю задачу використовуючи тільки додавання та віднімання, при цьому кількість дій повинна бути O(n).
(defun getSquares_rec 
    (i current addition)
    (cond
        ((> i 0) (write current) (format T ", ") (getSquares_rec (- i 1) (+ current addition) (+ addition 2)))
        ((= i 0) (write current))
    )
)
(defun getSquares (i) (getSquares_rec i 0 1))

(write-line "Task 7 Квадрати всіх натуральних чисел від 0 до n:")
(getSquares 5)
(terpri)

(princ "-------------------------------------------- ")
(terpri)

;8. Написати функції: 
;а) (MATR_GET m i j) – повернути значення m[i][j], де m – матриця n * n, i<=n, j<=n.
;б) (MATR_CHANGE m i j value) – повернути матрицю, у якій m[i][j]=value.
;в) (GENMATR0 i j) – згенерувати нульову матрицю i * j.
;г) (PMATR m i j) – надрукувати матрицю m як таблицю i * j (вивід форматувати).

; Task 8:  (MATR_GET m i j) – повернути значення m[i][j], де m – матриця n * n, i<=n, j<=n..
(defun MATR_GET (m i j)
   (loop while (> i 0)
         do( setq i (- i 1) m (cdr m))) (setq m (car m))
   (loop while (> j 0)
         do (setq j (- j 1) m (cdr m)))
   (car m))

(princ "Task 8 Повернути значення m[i][j]: ")
(PRINT(MATR_GET '((1 3 4) (4 5 6) (7 8 9)) 2 0))
(terpri)

; Task 8:  (MATR_CHANGE m i j value) – повернути матрицю, у якій m[i][j]=value.
(defun replace-nth (n lst new)
(cond
((null lst)(list new))
((eql n 0) (cons new (cdr lst)))
((> n 0) (cons (car lst)
(replace-nth (- n 1)(cdr lst) new)))
((error "Unhandled values.")))
)

(defun MATR_CHANGE (m i j value)
(setq mm m)
(setq ii i)
(loop while (> i 0)
do( setq i (- i 1) mm (cdr mm)))
(replace-nth ii m (replace-nth j (car mm) value))
)

(princ "Task 8 Повернути матрицю, у якій m[i][j]=value: ")
(setq data '((a b c) (d e f) (g h ij)))
(setq data (MATR_CHANGE data 1 2 pi))
(print data)
(terpri)

; Task 8:  (GENMATR0 i j) – згенерувати нульову матрицю i * j.
(DEFUN GENROW0 (n)
(cond
((eql n 0) nil)
((cons 0 (GENROW0 (- n 1))))
)
)

(defun GENMATR0 (i j) (setq m '() row (GENROW0 j))
   (loop while (> i 0)
         do ( setq i (- i 1) m (cons row m)))
   m)

(princ "Task 8 Згенерувати нульову матрицю i * j: ")
(PRINT(GENMATR0 3 4))
(terpri)	

; Task 8: (PMATR m i j) – надрукувати матрицю m як таблицю i * j (вивід форматувати).
(defun PMATR-rec (m i j)
  (cond
    ((= i 0) nil)
    (t
      (PMATR-rec m (- i 1) j)
      (loop for elem in (nth (- i 1) m)
            do (format t "~a~t" elem))
      (terpri)
    )
  )
)

(defun PMATR (m i j)
  (PMATR-rec m i j)
)

(princ "Task 8 Надрукувати матрицю як таблицю: ")
(terpri)
(PMATR '((1 2 3) (4 5 6) (7 8 9) (10 11 12)) 4 3)
(terpri)